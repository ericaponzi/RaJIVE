library(ajive)
?ajive
ajive
?mclapply
??mclapply
??mapply
??mapply
?lapply
?svd_reconstruction
?svd
?detectCores
?registerDoParallel
??registerDoParallel
?foreach
?sample.int
?do.call
?data_heatmap
setwd("./RaJIVE/")
document()
library(devtools)
library(roxygen2)
setwd("./RaJIVE/")
document()
document()
document()
document()
setwd("C:/Users/ericapo/Desktop/Robust JIVE/")
setwd("./RaJIVE/")
document()
library(devtools)
library(roxygen2)
document()
document()
document()
document()
usethat::use_vignette("Robust aJIVE")
devtools::use_vignette("Robust aJIVE")
usethis::use_vignette("Robust aJIVE")
usethis::use_vignette("RaJIVE")
usethis::use_vignette("RaJIVE")
devtools::install("RaJIVE")
setwd("C:/Users/ericapo/Desktop/Robust JIVE/")
devtools::install("RaJIVE")
library("RaJIVE")
?ajive
?Rajive
blocks <- sample_toy_data(n=200, dx=100, dy=500)
initial_signal_ranks <- c(2, 2)
Rajive_decomp <- Rajive(blocks, initial_signal_ranks)
?sample_toy_data
ajive:sample_toy_data
ajive::sample_toy_data
setwd("./RaJIVE/")
document()
jive.data.sim <- function(K = 3, rankJ = 2,
rankA = c(20, 15, 10),
n = 100,
pks,
dist.type = 1, noise = 1){
p <- sum(pks)
S <- sim_from_rand_dist(num = dist.type, n = n, p = rankJ)
U <- sim_from_rand_dist(num = dist.type, n = rankJ, p = p)
J <- S %*% U
Xs <- As <- list()
idx <- 1
for (k in 1:K) {
rankAk <- rankA[k]
Sk <- sim_from_rand_dist(num = dist.type, n = n, p = rankAk)
Wk <- sim_from_rand_dist(num = dist.type, n = rankAk, p = pks[k])
Ak <- Sk %*% Wk
As[[k]] <- Ak
col_idx <- idx:(idx + pks[k] - 1)
Xs[[k]] <- J[,col_idx] + Ak +
matrix(rnorm(n = n*pks[k], mean = 0, sd = noise), nrow = n, ncol = pks[k])
idx <- idx + pks[k]
}
Sig <- J %*% t(J)
Deltks <- lapply(As, FUN = function(A) {return(t(A) %*% A)})
truth <- list(Sig_true = Sig, Deltks_true = Deltks, J_true = J,
As_true = As, rankJ = rankJ, rankA = rankA)
Xsim <- list(sim_data = Xs, truth = truth)
return(Xsim)
}
Y <- jive.data.sim(K =3, rankJ = JrankTrue,
rankA = initial_signal_ranks, n = n,
pks = c(p1, p2, p3), dist.type = 1)
initial_signal_ranks <- c(2, 2)
Y <- jive.data.sim(K =3, rankJ = JrankTrue,
rankA = initial_signal_ranks, n = 30,
pks = c(10, 14, 2), dist.type = 1)
initial_signal_ranks <- c(2, 2)
Y <- jive.data.sim(K =3, rankJ =1,
rankA = c(2,4), n = 30,
pks = c(10, 14, 2), dist.type = 1)
initial_signal_ranks <- c(2, 2)
n <- 100
# dimension of data set (has to be >> n)
p1 <- 200
p2 <- 180
p3 <- 145
JrankTrue <- 2
initial_signal_ranks = c(20, 12, 12)
nsim <- 100
Y <- jive.data.sim(K =3, rankJ = JrankTrue,
rankA = initial_signal_ranks,
n = n,
pks = c(p1, p2, p3),
dist.type = 1)
Y <- jive.data.sim(K =3, rankJ = JrankTrue,
rankA = initial_signal_ranks, n = n,
pks = c(p1, p2, p3), dist.type = 1)
initial_signal_ranks <- c(2, 2)
document()
setwd("C:/Users/ericapo/Desktop/Robust JIVE/")
devtools::install("RaJIVE")
library("RaJIVE")
browseVignettes("RaJIVE")
library(RaJIVE)
library(r.jive)
data(BRCA_data)
lapply(Data, dim)
# we need the transpose for aJIVE
# we need to center and scale the data
library(SpatioTemporal)
data.ajive <- list()
for (l in 1:length(Data)){
# transpose
X <- t(as.data.frame(Data[[l]]))
# SVD miss for missing values
Xtemp <- SVDmiss(X)[[1]]
Ximp0 <- Xtemp$u %*% diag(x = Xtemp$d) %*% t(Xtemp$v)
# center values
centerValues <- apply(Ximp0, 1, mean, na.rm = T)
Ximp <- Ximp0 - matrix(rep(centerValues,
ncol(Ximp0)), nrow = nrow(Ximp0))
# scale values
#n <- nrow(Ximp) * ncol(Ximp)
#Ximp <- Ximp/norm(Ximp, type = "f") * sqrt(sum(n))
data.ajive[[l]] <- Ximp
}
# run aJIVE
library(ggplot2)
ajive.results <- ajive(data.ajive, initial_signal_ranks = c(20, 12, 18))
library(ajive)
detach("package:ajive", unload = TRUE)
Y <- jive.data.sim(K =3, rankJ = 2, rankA = c(20, 12, 12), n = 100,
pks = c(200, 180, 150), dist.type = 1)
library(RaJIVE)
Y <- jive.data.sim(K =3, rankJ = 2, rankA = c(20, 12, 12), n = 100,
pks = c(200, 180, 150), dist.type = 1)
library(RaJIVE)
?jive.data.sim
?jive.data.sim
devtools::install("RaJIVE")
library(RaJIVE)
?jive.data.sim
?Ra
?Raj
?Rajive
