plot.roc(roc(data.test$Y, data.test$pred),
col = 'black', lty = 5, print.auc = TRUE, print.auc.y = 0.6, print.auc.cex = 0.9, identity = FALSE,
main = 'Metastasis (yes vs no', xlim = c(1, 0), xlab = "", ylab = "")
plot(roc(data.test$Y, data.test$pred.j),
col = 'red', add = TRUE, lty = 5, print.auc = TRUE, print.auc.y = 0.5, print.auc.cex = 0.9)
plot(roc(data.test$Y, data.test$pred.i),
col = 'darkgreen', add = TRUE, lty = 5, print.auc = TRUE, print.auc.y = 0.3, print.auc.cex = 0.9)
plot(roc(data.test$Y, data.test$pred.ni),
col = 'darkorchid', add = TRUE, lty = 5, print.auc = TRUE, print.auc.y = 0.2, print.auc.cex = 0.9)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom",bty = "n", inset=c(0,0.02), xpd = TRUE, ncol = 2,
legend=c("Joint and Individual Components",
"Joint Components",
"Individual Components",
"Non integrative"),
lty = c(5,5,5,5),
col = c("black",
"red",
"darkgreen",
"darkorchid")
, cex = 0.8)
# pre set folds
# shuffle data
set.seed(20201117)
data.logistic <- data.logistic[sample(nrow(data.logistic)),]
# 10 equally sized folds
folds <- cut(seq(1, nrow(data.logistic)), breaks = 10, labels = FALSE)
auc <- c()
auc.j <- c()
auc.i <- c()
auc.ni <- c()
roc <- list()
roc.ni <- list()
roc.j <- list()
roc.i <- list()
for (i in 1:10){
testIndexes <- which(folds == i, arr.ind = TRUE)
data.test <- data.logistic[testIndexes, ]
data.train <- data.logistic[-testIndexes, ]
model.fit <- glm(formula, family = 'binomial',
data = data.train)
model.fit.ni <- glm(formula.ni, family = 'binomial',
data = data.train)
model.fit.j <- glm(formula.j, family = 'binomial',
data = data.train)
model.fit.i <- glm(formula.i, family = 'binomial',
data = data.train)
data.test$pred <- predict(model.fit, data.test, type = 'response')
data.test$pred.ni <- predict(model.fit.ni, data.test, type = 'response')
data.test$pred.j <- predict(model.fit.j, data.test, type = 'response')
data.test$pred.i <- predict(model.fit.i, data.test, type = 'response')
roc[[i]] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred))
roc.ni[[i]] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred.ni))
roc.j[[i]] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred.j))
roc.i[[i]] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred.i))
auc[i] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred))$auc
auc.ni[i] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred.ni))$auc
auc.j[i] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred.j))$auc
auc.i[i] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred.i))$auc
}
mean(auc)
mean(auc.ni)
mean(auc.j)
mean(auc.i)
# try binary classification
data.logistic <- as.data.frame(cbind(Y,  jointscores,
indivscores1, indivscores2,
indivscores3,
prot.pcs, mrna.pcs,
mirna.pcs))
names(data.logistic)[(rj+r1+r2+r3+2):ncol(data.logistic)] <- c('PC1prot', 'PC2prot', 'PC3prot', 'PC4prot', 'PC5prot',
'PC1mr', 'PC2mr', 'PC3mr', 'PC4mr', 'PC5mr','PC6mr','PC7mr',
'PC1mi', 'PC2mi', 'PC3mi', 'PC4mi', 'PC5mi')
data.logistic <- data.logistic[data.logistic$Y != 1, ]
#data.logistic[data.logistic$Y <2, ]$Y <- '0'
#data.logistic$Y[data.logistic$Y >1 ] <- '1'
data.logistic$Y <- as.factor(data.logistic$Y)
data.train <- data.logistic
model.fit <- glm(formula , family = 'binomial',
data = data.train)
model.fit.j <- glm(formula.j, family = 'binomial',
data = data.train)
model.fit.i <- glm(formula.i, family = 'binomial',
data = data.train)
model.fit.ni <- glm(formula.ni, family = 'binomial',
data = data.train)
data.test <- data.logistic
data.test$pred <- predict(model.fit, data.test, type = 'response')
data.test$pred.j <- predict(model.fit.j, data.test, type = 'response')
data.test$pred.i <- predict(model.fit.i, data.test, type = 'response')
data.test$pred.ni <- predict(model.fit.ni, data.test, type = 'response')
roc(data.test$Y, as.numeric(data.test$pred))$auc
roc(data.test$Y, as.numeric(data.test$pred.j))$auc
roc(data.test$Y, as.numeric(data.test$pred.i))$auc
roc(data.test$Y, as.numeric(data.test$pred.ni))$auc
par(oma = c(4, 1, 1, 1))
plot.roc(roc(data.test$Y, data.test$pred),
col = 'black', lty = 5, print.auc = TRUE, print.auc.y = 0.6, print.auc.cex = 0.9, identity = FALSE,
main = 'Metastasis (yes vs no', xlim = c(1, 0), xlab = "", ylab = "")
plot(roc(data.test$Y, data.test$pred.j),
col = 'red', add = TRUE, lty = 5, print.auc = TRUE, print.auc.y = 0.5, print.auc.cex = 0.9)
plot(roc(data.test$Y, data.test$pred.i),
col = 'darkgreen', add = TRUE, lty = 5, print.auc = TRUE, print.auc.y = 0.3, print.auc.cex = 0.9)
plot(roc(data.test$Y, data.test$pred.ni),
col = 'darkorchid', add = TRUE, lty = 5, print.auc = TRUE, print.auc.y = 0.2, print.auc.cex = 0.9)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom",bty = "n", inset=c(0,0.02), xpd = TRUE, ncol = 2,
legend=c("Joint and Individual Components",
"Joint Components",
"Individual Components",
"Non integrative"),
lty = c(5,5,5,5),
col = c("black",
"red",
"darkgreen",
"darkorchid")
, cex = 0.8)
# pre set folds
# shuffle data
set.seed(20201117)
data.logistic <- data.logistic[sample(nrow(data.logistic)),]
# 10 equally sized folds
folds <- cut(seq(1, nrow(data.logistic)), breaks = 10, labels = FALSE)
auc <- c()
auc.j <- c()
auc.i <- c()
auc.ni <- c()
roc <- list()
roc.ni <- list()
roc.j <- list()
roc.i <- list()
for (i in 1:10){
testIndexes <- which(folds == i, arr.ind = TRUE)
data.test <- data.logistic[testIndexes, ]
data.train <- data.logistic[-testIndexes, ]
model.fit <- glm(formula, family = 'binomial',
data = data.train)
model.fit.ni <- glm(formula.ni, family = 'binomial',
data = data.train)
model.fit.j <- glm(formula.j, family = 'binomial',
data = data.train)
model.fit.i <- glm(formula.i, family = 'binomial',
data = data.train)
data.test$pred <- predict(model.fit, data.test, type = 'response')
data.test$pred.ni <- predict(model.fit.ni, data.test, type = 'response')
data.test$pred.j <- predict(model.fit.j, data.test, type = 'response')
data.test$pred.i <- predict(model.fit.i, data.test, type = 'response')
roc[[i]] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred))
roc.ni[[i]] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred.ni))
roc.j[[i]] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred.j))
roc.i[[i]] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred.i))
auc[i] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred))$auc
auc.ni[i] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred.ni))$auc
auc.j[i] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred.j))$auc
auc.i[i] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred.i))$auc
}
mean(auc)
mean(auc.ni)
mean(auc.j)
mean(auc.i)
View(data.logistic)
showVarExplained.ajive <- function(ajiveResults, blocks,
col = c("grey20", "grey43", "grey65")){
l <- length(blocks)
# joint variance
VarJoint = rep(0, l)
for (i in 1:l) VarJoint[i] = norm(as.matrix(ajiveResults$block_decomps[[i]]$joint[[1]]),
type = "F")^2/norm(blocks[[i]], type = "F")^2
# individual variances
VarIndiv = rep(0, l)
for (i in 1:l) VarIndiv[i] = norm(as.matrix(ajiveResults$block_decomps[[i]]$individual[[1]]),
type = "F")^2/norm(blocks[[i]], type = "F")^2
# residual variance
VarSubtr = 1 - VarJoint - VarIndiv
# plot
par(mar = c(5.1, 4.1, 4.1, 0))
layout(matrix(c(1, 2), 1, 2), heights = c(5, 5), widths = c(5,
2))
barplot(rbind(VarJoint, VarIndiv, VarSubtr), col = col, main = "Variation Explained",
names.arg = names(blocks))
par(mar = c(0, 0, 0, 0))
plot.new()
legend(x = 0.05, y = 0.8, legend = c("Joint", "Individual",
"Residual"), bty = "n", fill = col)
VarProp <- list(VarJoint, VarIndiv, VarSubtr)
names(VarProp) <- c('Joint', 'Indiv', 'Resid')
return(VarProp)
}
library(mixOmics)
library(ajive)
library(SpatioTemporal)
library(ggplot2)
library(pROC)
library(nnet)
data('breast.TCGA')
# extract training data
data = list(mRNA = breast.TCGA$data.train$mrna,
miRNA = breast.TCGA$data.train$mirna)#,
# check dimension
lapply(data, dim)
# outcome
Y = breast.TCGA$data.train$subtype
summary(Y)
ajive.dataprep <- function(data){
data.ajive <- list()
for (l in 1:length(data)){
X <- t(as.data.frame(data[[l]]))
# svdmiss
Xtemp <- SVDmiss(X)[[1]]
Ximp0 <- Xtemp$u %*% diag(x = Xtemp$d) %*% t(Xtemp$v)
# center values
centerValues <- apply(Ximp0, 1, mean, na.rm = T)
Ximp <- Ximp0 - matrix(rep(centerValues,
ncol(Ximp0)), nrow = nrow(Ximp0))
data.ajive[[l]] <- Ximp
}
return(data.ajive)
}
data.ajive  <- ajive.dataprep(data)
#data.ajive2 <- data.ajive
data.ajive2 <- lapply(data.ajive, function(l) t(l))
# determine ranks via profile likelihood
singular.values1 <- svd(data.ajive2[[1]])[['d']]
singular.values2 <- svd(data.ajive2[[2]])[['d']]
# remove the first cause it needs a category for itself
#
singular.values1 <- singular.values1[-c(1)]
singular.values2 <- singular.values2[-c(1)]
singular.val <- list(singular.values1,
singular.values2)#,
# calculate profile loglikelihood utility function
r <- c()
for (s in 1:2){
singular.values <- singular.val[[s]]
l <- length(singular.values)
proflik <- c()
for (i in 1: l){
mu1 <- mean(singular.values[1:i])
s1 <- sum((singular.values[1:i]- mu1)^2)
mu2 <- mean(singular.values[(i+1):l])
s2 <- sum((singular.values[(i+1):l]-mu2)^2)
if (i == l) s2 <- 0
proflik[i] <- s1+s2
}
# visualize results
plot(-proflik)
# rank will be arg min
# +1 because we left one out
r[s] <- which.min(proflik)
}
r
# add eliminated ones
r <- r + c(1,1,0)
r <- c(25, 22)
# run ajive
ajiveResults <- ajive(data.ajive2, initial_signal_ranks = r)
ajiveResults$joint_rank
source('C:/Users/ericapo/Desktop/NOWAC/ResultsFromHunt/data_heatmap_modified.R')
decomposition_heatmaps(data.ajive2, ajiveResults)
showVarExplained.ajive(ajiveResults, data.ajive2)
## use joint and individual ajive components to predict Y
rj <- ajiveResults$joint_rank
r1 <- ajiveResults$block_decomps[[1]]$individual$rank
r2 <- ajiveResults$block_decomps[[2]]$individual$rank
# pick first five
#r1 <- r2 <- r3 <- 5
jointscores <- unlist(ajiveResults$joint_scores)
indivscores1 <- ajiveResults$block_decomps[[1]]$individual$u[,1:r1]
indivscores2 <- ajiveResults$block_decomps[[2]]$individual$u[,1:r2]
# non integrated analysis
mRNA <- data.ajive2[[1]]
miRNA <- data.ajive2[[2]]
proteomics <- data.ajive2[[3]]
dim(mRNA)
dim(miRNA)
# pca on mRNA
mrna.pca <- prcomp(mRNA, center = TRUE, scale = TRUE)
std_dev <- mrna.pca$sdev
pr_var <- std_dev^2
prop_varex <- pr_var/sum(pr_var)
plot(prop_varex[1:20], xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
prop_varex
mrna.pcs <- mrna.pca$x[,1:5]
# pca on miRNA
mirna.pca <- prcomp(miRNA, center = TRUE, scale = TRUE)
std_dev <- mirna.pca$sdev
pr_var <- std_dev^2
prop_varex <- pr_var/sum(pr_var)
plot(prop_varex[1:20], xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
mirna.pcs <- mirna.pca$x[,1:5]
# prediction on outcome
#Y <- clusts
data.logistic <- as.data.frame(cbind(Y,  jointscores,
indivscores1, indivscores2,
#indivscores3,
prot.pcs, mrna.pcs,
#mirna.pcs
))
# prediction on outcome
#Y <- clusts
data.logistic <- as.data.frame(cbind(Y,  jointscores,
indivscores1, indivscores2,
#indivscores3,
#prot.pcs,
mrna.pcs,
mirna.pcs
))
names(data.logistic)[(rj+r1+r2+2):ncol(data.logistic)] <- c(#'PC1prot', 'PC2prot', 'PC3prot', 'PC4prot', 'PC5prot',
'PC1mr', 'PC2mr', 'PC3mr', 'PC4mr', 'PC5mr','PC6mr','PC7mr',
'PC1mi', 'PC2mi', 'PC3mi', 'PC4mi', 'PC5mi')
names(data.logistic)
(rj+r1+r2+2)
names(data.logistic)[(rj+r1+r2+2):ncol(data.logistic)] <- c(#'PC1prot', 'PC2prot', 'PC3prot', 'PC4prot', 'PC5prot',
'PC1mr', 'PC2mr', 'PC3mr', 'PC4mr', 'PC5mr',
'PC1mi', 'PC2mi', 'PC3mi', 'PC4mi', 'PC5mi')
# test LumA vs not LumA
#data.logistic[data.logistic$Y <2, ]$Y <- '0'
#data.logistic$Y[data.logistic$Y >1 ] <- '1'
data.logistic$Y <- as.factor(data.logistic$Y)
data.logistic$Y
xvars <- names(data.logistic[2:(rj+r1+r2+r3+1)])
formula <- paste( 'Y', '~', paste( xvars, collapse=' + ' ) )
xvars.j <- names(data.logistic[2:(rj+1)])
formula.j <- paste( 'Y', '~', paste( xvars.j, collapse=' + ' ) )
xvars <- names(data.logistic[2:(rj+r1+r2+1)])
formula <- paste( 'Y', '~', paste( xvars, collapse=' + ' ) )
xvars.j <- names(data.logistic[2:(rj+1)])
formula.j <- paste( 'Y', '~', paste( xvars.j, collapse=' + ' ) )
xvars.i <- names(data.logistic[(rj+2):((rj+r1+r2+1))])
formula.i <- paste( 'Y', '~', paste( xvars.i, collapse=' + ' ) )
xvars.ni <- names(data.logistic[(rj+r1+r2+2):ncol(data.logistic)])
formula.ni <- paste( 'Y', '~', paste( xvars.ni, collapse=' + ' ) )
#index <- sample(150, 100)
data.train <- data.logistic
model.fit <- multinom(formula ,
data = data.train)
model.fit.j <- multinom(formula.j,
data = data.train)
model.fit.i <- multinom(formula.i,
data = data.train)
model.fit.ni <- multinom(formula.ni,
data = data.train)
data.test <- data.logistic[-index,]
data.test <- data.logistic
data.test$pred <- predict(model.fit, data.test, type = 'class')
data.test$pred.j <- predict(model.fit.j, data.test, type = 'class')
data.test$pred.i <- predict(model.fit.i, data.test, type = 'class')
data.test$pred.ni <- predict(model.fit.ni, data.test, type = 'class')
multiclass.roc(data.test$Y, as.numeric(data.test$pred))$auc
multiclass.roc(data.test$Y, as.numeric(data.test$pred.j))$auc
multiclass.roc(data.test$Y, as.numeric(data.test$pred.i))$auc
multiclass.roc(data.test$Y, as.numeric(data.test$pred.ni))$auc
par(oma = c(4, 1, 1, 1))
plot.roc(roc(data.test$Y, data.test$pred),
col = 'black', lty = 5, print.auc = TRUE, print.auc.y = 0.6, print.auc.cex = 0.9, identity = FALSE,
main = 'Metastasis (yes vs no', xlim = c(1, 0), xlab = "", ylab = "")
plot(roc(data.test$Y, data.test$pred.j),
col = 'red', add = TRUE, lty = 5, print.auc = TRUE, print.auc.y = 0.5, print.auc.cex = 0.9)
plot(roc(data.test$Y, data.test$pred.i),
col = 'darkgreen', add = TRUE, lty = 5, print.auc = TRUE, print.auc.y = 0.3, print.auc.cex = 0.9)
plot(roc(data.test$Y, data.test$pred.ni),
col = 'darkorchid', add = TRUE, lty = 5, print.auc = TRUE, print.auc.y = 0.2, print.auc.cex = 0.9)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom",bty = "n", inset=c(0,0.02), xpd = TRUE, ncol = 2,
legend=c("Joint and Individual Components",
"Joint Components",
"Individual Components",
"Non integrative"),
lty = c(5,5,5,5),
col = c("black",
"red",
"darkgreen",
"darkorchid")
, cex = 0.8)
# pre set folds
# shuffle data
set.seed(20201117)
data.logistic <- data.logistic[sample(nrow(data.logistic)),]
# 10 equally sized folds
folds <- cut(seq(1, nrow(data.logistic)), breaks = 10, labels = FALSE)
auc <- c()
auc.j <- c()
auc.i <- c()
auc.ni <- c()
roc <- list()
roc.ni <- list()
roc.j <- list()
roc.i <- list()
for (i in 1:10){
testIndexes <- which(folds == i, arr.ind = TRUE)
data.test <- data.logistic[testIndexes, ]
data.train <- data.logistic[-testIndexes, ]
model.fit <- multinom(formula,
data = data.train)
model.fit.ni <- multinom(formula.ni,
data = data.train)
model.fit.j <- multinom(formula.j,
data = data.train)
model.fit.i <- multinom(formula.i,
data = data.train)
data.test$pred <- predict(model.fit, data.test, type = 'class')
data.test$pred.ni <- predict(model.fit.ni, data.test, type = 'class')
data.test$pred.j <- predict(model.fit.j, data.test, type = 'class')
data.test$pred.i <- predict(model.fit.i, data.test, type = 'class')
roc[[i]] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred))
roc.ni[[i]] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred.ni))
roc.j[[i]] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred.j))
roc.i[[i]] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred.i))
auc[i] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred))$auc
auc.ni[i] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred.ni))$auc
auc.j[i] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred.j))$auc
auc.i[i] <- multiclass.roc(data.test$Y, as.numeric(data.test$pred.i))$auc
}
mean(auc)
mean(auc.ni)
mean(auc.j)
mean(auc.i)
library(randomForest)
library(iCluster)
data(gbm)
library(iCluster)
data(gbm)
# check dimension
lapply(gbm, dim)
knitr::opts_chunk$set(echo = TRUE)
library(r.jive)
data <- read.csv('TCGA_ov_mirna.csv')
str(data)
library(iClusterPlus)
data(gbm)
dim(gbm.exp)
library(bayesCC)
install.packages('bayesCC')
install.packages("remotes")
remotes::install_github("ttriche/bayesCC")
install.packages("remotes")
remotes::install_github("ttriche/bayesCC")
library(devtools)
library(roxygen2)
setwd("C:/Users/ericapo/Desktop/Robust JIVE/")
devtools::create("RaJIVE")
usethis::create_package("RaJIVE")
setwd("./RaJIVE/")
devtools::document()
usethis::use_vignette("RaJIVE")
setwd("C:/Users/ericapo/Desktop/Robust JIVE/")
devtools::install("RaJIVE")
devtools::check("RaJIVE")
setwd("C:/Users/ericapo/Desktop/Robust JIVE/")
usethis::create_package("RaJIVE")
setwd("./RaJIVE/")
setwd("C:/Users/ericapo/Desktop/Robust JIVE/")
devtools::install("RaJIVE")
library("RaJIVE")
devtools::check("RaJIVE")
setwd("C:/Users/ericapo/Desktop/Robust JIVE/")
devtools::check("RaJIVE")
usethis::create_package("RaJIVE")
usethis::create_package("RaJIVE")
devtools::install("RaJIVE")
library("RaJIVE")
devtools::check("RaJIVE")
devtools::check("RaJIVE")
setwd("C:/Users/ericapo/Desktop/Robust JIVE/")
devtools::install("RaJIVE")
devtools::install("RaJIVE")
devtools::install("RaJIVE")
library("RaJIVE")
devtools::check("RaJIVE")
devtools::check("RaJIVE")
devtools::install("RaJIVE")
install.packages('vctrs')
devtools::install("RaJIVE")
setwd("C:/Users/ericapo/Desktop/Robust JIVE/")
devtools::install("RaJIVE")
remove.packages("vctrs", lib="C:/Program Files/R/R-3.6.1/library")
devtools::install("RaJIVE")
devtools::install("RaJIVE")
devtools::install("RaJIVE")
install.packages('vctrs')
library(vctrs)
devtools::install("RaJIVE")
library("RaJIVE")
devtools::check("RaJIVE")
library(ggplot2)
setwd("C:/Users/ericapo/Desktop/Robust JIVE/")
devtools::install("RaJIVE")
install.packages('rlang')
install.packages("rlang")
devtools::check("RaJIVE")
devtools::check("RaJIVE")
devtools::check("RaJIVE")
blocks <- ajive::sample_toy_data(n=200, dx=100, dy=500)
usethis::create_package("RaJIVE")
setwd("C:/Users/ericapo/Desktop/Robust JIVE/")
devtools::install("RaJIVE")
devtools::check("RaJIVE")
usethis::create_package("RaJIVE")
setwd("C:/Users/ericapo/Desktop/Robust JIVE/")
devtools::install("RaJIVE")
devtools::check("RaJIVE")
devtools::check("RaJIVE")
usethis::create_package("RaJIVE")
devtools::check("RaJIVE")
devtools::install("RaJIVE")
